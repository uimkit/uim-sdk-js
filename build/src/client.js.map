{"version":3,"file":"client.js","sourceRoot":"","sources":["../../src/client.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Agent } from \"http\"\nimport { isNode } from \"browser-or-node\"\nimport { omit, pick } from \"lodash\"\nimport {\n  Logger,\n  LogLevel,\n  logLevelSeverity,\n  makeConsoleLogger,\n} from \"./logging\"\nimport {\n  buildRequestError,\n  isHTTPResponseError,\n  isUIMClientError,\n  RequestTimeoutError,\n} from \"./errors\"\nimport { createQueryParams, createRandomString } from \"./helpers\"\nimport {\n  ListIMAccountsParameters,\n  ListIMAccountsResponse,\n  ListContactsParameters,\n  ListContactsResponse,\n  ListGroupsParameters,\n  ListGroupsResponse,\n  ListConversationsParameters,\n  ListConversationsResponse,\n  ListGroupMembersParameters,\n  ListGroupMembersResponse,\n  ListMomentsParameters,\n  ListMomentsResponse,\n  ListMessagesParameters,\n  ListMessagesResponse,\n  RetrieveIMAccountParameters,\n  RetrieveIMAccountResponse,\n  RetrieveContactParameters,\n  RetrieveContactResponse,\n  RetrieveGroupParameters,\n  RetrieveGroupResponse,\n  RetrieveConversationParameters,\n  RetrieveConversationResponse,\n  SendPrivateMessageResponse,\n  SendGroupMessageResponse,\n  SendPrivateMessageParameters,\n  SendGroupMessageParameters,\n} from \"./api-endpoints\"\nimport nodeFetch from \"node-fetch\"\nimport packageInfo from \"../package.json\"\nimport { SupportedFetch } from \"./fetch-types\"\nimport { SupportedPubSub, PubSubOptions, default as PubSub } from \"./pubsub\"\nimport {\n  ConversationUpdatedHandler,\n  Event,\n  EventHandler,\n  EventType,\n  IMAccountStatusUpdatedHandler,\n  IMAccountUpdatedHandler,\n  MessageReceivedEvent,\n  MessageUpdatedHandler,\n  NewConversationHandler,\n} from \"./events\"\nimport { cursorListQueryParams, pageListQueryParams } from \"./models\"\n\nexport interface ClientOptions {\n  timeoutMs?: number\n  baseUrl?: string\n  logLevel?: LogLevel\n  logger?: Logger\n  uimVersion?: string\n  fetch?: SupportedFetch\n  pubsub?: SupportedPubSub\n  /** Silently ignored in the browser */\n  agent?: Agent\n  /** Options for pubsub */\n  pubsubOptions?: PubSubOptions\n}\n\nconst defaultPubSubOptions: PubSubOptions = {\n  subscribeKey: \"\",\n  uuid: \"\",\n}\n\nexport interface RequestParameters {\n  path: string\n  method: Method\n  query?: QueryParams\n  body?: Record<string, unknown>\n  auth?: string\n}\n\nexport type AuthorizeCallback = (id: string | null) => void\n\ninterface AuthorizeResult {\n  id?: string\n  state?: string\n  error?: string\n}\n\nconst PACKAGE_VERSION = packageInfo.version\nconst PACKAGE_NAME = packageInfo.name\n\nexport default class Client {\n  _auth?: string\n  _logLevel: LogLevel\n  _logger: Logger\n  _prefixUrl: string\n  _timeoutMs: number\n  _uimVersion: string\n  _fetch: SupportedFetch\n  _pubsub: SupportedPubSub\n  _agent: Agent | undefined\n  _userAgent: string\n  _handlers: Record<string, EventHandler>\n  _messageEventListener?: (msgEvent: MessageEvent) => void\n\n  static readonly defaultUIMVersion = \"2022-02-22\"\n\n  public constructor(token: string, options?: ClientOptions) {\n    this._auth = token\n    this._logLevel = options?.logLevel ?? LogLevel.WARN\n    this._logger = options?.logger ?? makeConsoleLogger(PACKAGE_NAME)\n    this._prefixUrl = options?.baseUrl ?? \"https://api.uimkit.chat/client/v1/\"\n    this._timeoutMs = options?.timeoutMs ?? 60_000\n    this._uimVersion = options?.uimVersion ?? Client.defaultUIMVersion\n    this._fetch =\n      options?.fetch ?? (isNode ? nodeFetch : window.fetch.bind(window))\n    this._agent = options?.agent\n    this._userAgent = `uim-client/${PACKAGE_VERSION}`\n    this._handlers = {}\n    this._pubsub =\n      options?.pubsub ??\n      new PubSub(options?.pubsubOptions ?? defaultPubSubOptions)\n    this._pubsub.addListener(this.onEvent.bind(this))\n    this._messageEventListener = undefined\n  }\n\n  public async authorize(\n    provider: string,\n    cb?: AuthorizeCallback\n  ): Promise<string | null> {\n    const state = createRandomString(16)\n    const token = this._auth ?? \"\"\n    const params = { provider, token, state }\n    const url = `${this._prefixUrl}authorize?${createQueryParams(params)}`\n    const win = this.popup(url, \"uim-authorize-window\")\n    if (!win) {\n      throw new Error(\"open authorize window error\")\n    }\n\n    const res = await Promise.race([\n      // 等待授权页面返回\n      this.listenToAuthorizeResult(),\n      // 检测授权页面关闭\n      new Promise<null>(resolve => {\n        const handle = setInterval(() => {\n          if (win.closed) {\n            clearInterval(handle)\n            // 授权页 postMessage 后会关闭自己，这里延后让 message 先得到处理\n            setTimeout(() => resolve(null), 500)\n          }\n        }, 500)\n      }),\n    ])\n    if (this._messageEventListener) {\n      window.removeEventListener(\"message\", this._messageEventListener)\n    }\n    this._messageEventListener = undefined\n\n    if (!res) {\n      // 授权页窗口被用户关闭了\n      cb && cb(null)\n      return null\n    }\n\n    if (res.error) {\n      throw new Error(res.error)\n    }\n\n    if (res.state !== state) {\n      throw new Error(\"invalid authorize state\")\n    }\n\n    cb && cb(res.id!)\n    return res.id!\n  }\n\n  private async listenToAuthorizeResult(): Promise<AuthorizeResult> {\n    const { origin } = new URL(this._prefixUrl)\n    return new Promise<AuthorizeResult>(resolve => {\n      const msgEventListener = (msgEvent: MessageEvent) => {\n        if (\n          msgEvent.origin !== origin ||\n          msgEvent.data?.type !== \"authorization_response\"\n        ) {\n          return\n        }\n        window.removeEventListener(\"message\", msgEventListener)\n        this._messageEventListener = undefined\n        return resolve(msgEvent.data)\n      }\n\n      this._messageEventListener = msgEventListener\n      window.addEventListener(\"message\", msgEventListener)\n    })\n  }\n\n  private popup(url: string, title: string): Window | null {\n    const dualScreenLeft = window.screenLeft ?? window.screenX\n    const dualScreenTop = window.screenTop ?? window.screenY\n    const windowWidth =\n      window.innerWidth ?? document.documentElement.clientWidth ?? screen.width\n    const windowHeight =\n      window.innerHeight ??\n      document.documentElement.clientHeight ??\n      screen.height\n    const width = Math.min(800, windowWidth / 2)\n    const height = Math.min(600, windowHeight / 2)\n    const left = (windowWidth - width) / 2 + dualScreenLeft\n    const top = (windowHeight - height) / 2 + dualScreenTop\n    return window.open(\n      url,\n      title,\n      `scrollbars=yes, width=${width}, height=${height}, top=${top}, left=${left}`\n    )\n  }\n\n  public async request<ResponseBody>({\n    path,\n    method,\n    query,\n    body,\n    auth,\n  }: RequestParameters): Promise<ResponseBody> {\n    this.log(LogLevel.INFO, \"request start\", { method, path })\n\n    // If the body is empty, don't send the body in the HTTP request\n    const bodyAsJsonString =\n      !body || Object.entries(body).length === 0\n        ? undefined\n        : JSON.stringify(body)\n\n    const url = new URL(`${this._prefixUrl}${path}`)\n    if (query) {\n      for (const [key, value] of Object.entries(query)) {\n        if (value !== undefined) {\n          url.searchParams.append(key, String(value))\n        }\n      }\n    }\n\n    const authHeaders = await this.authAsHeaders(auth)\n    const headers: Record<string, string> = {\n      ...authHeaders,\n      \"UIM-Version\": this._uimVersion,\n      \"user-agent\": this._userAgent,\n    }\n\n    if (bodyAsJsonString !== undefined) {\n      headers[\"content-type\"] = \"application/json\"\n    }\n    try {\n      const response = await RequestTimeoutError.rejectAfterTimeout(\n        this._fetch(url.toString(), {\n          method,\n          headers,\n          body: bodyAsJsonString,\n          agent: this._agent,\n        }),\n        this._timeoutMs\n      )\n\n      const responseText = await response.text()\n      if (!response.ok) {\n        throw buildRequestError(response, responseText)\n      }\n\n      const responseJson: ResponseBody = JSON.parse(responseText)\n      this.log(LogLevel.INFO, `request success`, { method, path })\n      return responseJson\n    } catch (error: unknown) {\n      if (!isUIMClientError(error)) {\n        throw error\n      }\n\n      // Log the error if it's one of our known error types\n      this.log(LogLevel.WARN, `request fail`, {\n        code: error.code,\n        message: error.message,\n      })\n\n      if (isHTTPResponseError(error)) {\n        // The response body may contain sensitive information so it is logged separately at the DEBUG level\n        this.log(LogLevel.DEBUG, `failed response body`, {\n          body: error.body,\n        })\n      }\n\n      throw error\n    }\n  }\n\n  public on(type: EventType, handler: EventHandler): void {\n    this._handlers[type] = handler\n  }\n\n  public async listIMAccounts(\n    args: WithAuth<ListIMAccountsParameters>\n  ): Promise<ListIMAccountsResponse> {\n    const resp = await this.request<ListIMAccountsResponse>({\n      method: \"get\",\n      path: \"im_accounts\",\n      query: pick(args, [...pageListQueryParams]) as PlainQueryParams,\n      auth: args.auth,\n    })\n    if (args.subscribe && resp.data.length > 0) {\n      const channels = resp.data.map(it => this.channelName(it.id))\n      this._pubsub.subscribe(channels)\n    }\n    return resp\n  }\n\n  public async retrieveIMAccount(\n    args: WithAuth<RetrieveIMAccountParameters>\n  ): Promise<RetrieveIMAccountResponse> {\n    const resp = await this.request<RetrieveIMAccountResponse>({\n      path: `im_accounts/${args.account_id}`,\n      method: \"get\",\n      auth: args.auth,\n    })\n    if (args.subscribe) {\n      this._pubsub.subscribe([this.channelName(resp.id)])\n    }\n    return resp\n  }\n\n  public async listContacts(\n    args: WithAuth<ListContactsParameters>\n  ): Promise<ListContactsResponse> {\n    return this.request<ListContactsResponse>({\n      path: `im_accounts/${args.account_id}/contacts`,\n      method: \"get\",\n      query: pick(args, [...cursorListQueryParams]) as PlainQueryParams,\n      auth: args.auth,\n    })\n  }\n\n  public async retrieveContact(\n    args: WithAuth<RetrieveContactParameters>\n  ): Promise<RetrieveContactResponse> {\n    return this.request<RetrieveContactResponse>({\n      path: `im_accounts/${args.account_id}/contacts/${args.user_id}`,\n      method: \"get\",\n      auth: args.auth,\n    })\n  }\n\n  public async listGroups(\n    args: WithAuth<ListGroupsParameters>\n  ): Promise<ListGroupsResponse> {\n    return this.request<ListGroupsResponse>({\n      path: `im_accounts/${args.account_id}/groups`,\n      method: \"get\",\n      query: pick(args, [...pageListQueryParams]) as PlainQueryParams,\n      auth: args.auth,\n    })\n  }\n\n  public async retrieveGroup(\n    args: WithAuth<RetrieveGroupParameters>\n  ): Promise<RetrieveGroupResponse> {\n    return this.request<RetrieveGroupResponse>({\n      path: `im_accounts/${args.account_id}/groups/${args.group_id}`,\n      method: \"get\",\n      auth: args.auth,\n    })\n  }\n\n  public listGroupMembers(\n    args: WithAuth<ListGroupMembersParameters>\n  ): Promise<ListGroupMembersResponse> {\n    return this.request<ListGroupMembersResponse>({\n      path: `groups/${args.group_id}/members`,\n      method: \"get\",\n      query: pick(args, [...pageListQueryParams]) as PlainQueryParams,\n      auth: args.auth,\n    })\n  }\n\n  public listConversations(\n    args: WithAuth<ListConversationsParameters>\n  ): Promise<ListConversationsResponse> {\n    return this.request<ListConversationsResponse>({\n      path: `im_accounts/${args.account_id}/conversations`,\n      method: \"get\",\n      query: pick(args, [...cursorListQueryParams]) as PlainQueryParams,\n      auth: args.auth,\n    })\n  }\n\n  public retrieveConversation(\n    args: WithAuth<RetrieveConversationParameters>\n  ): Promise<RetrieveConversationResponse> {\n    return this.request<RetrieveConversationResponse>({\n      path: `conversations/${args.conversation_id}`,\n      method: \"get\",\n      auth: args.auth,\n    })\n  }\n\n  public listMessages(\n    args: WithAuth<ListMessagesParameters>\n  ): Promise<ListMessagesResponse> {\n    return this.request<ListMessagesResponse>({\n      path: `conversations/${args.conversation_id}/messages`,\n      method: \"get\",\n      query: pick(args, [...cursorListQueryParams]) as PlainQueryParams,\n      auth: args.auth,\n    })\n  }\n\n  public listMoments(\n    args: WithAuth<ListMomentsParameters>\n  ): Promise<ListMomentsResponse> {\n    return this.request<ListMomentsResponse>({\n      path: args.user_id\n        ? `im_accounts/${args.account_id}/contacts/${args.user_id}/moments`\n        : `im_accounts/${args.account_id}/moments`,\n      method: \"get\",\n      query: pick(args, [...cursorListQueryParams]) as PlainQueryParams,\n      auth: args.auth,\n    })\n  }\n\n  public sendPrivateMessage(\n    args: WithAuth<SendPrivateMessageParameters>\n  ): Promise<SendPrivateMessageResponse> {\n    return this.request<SendPrivateMessageResponse>({\n      path: \"send_private_message\",\n      method: \"post\",\n      body: omit(args, [\"auth\"]),\n      auth: args.auth,\n    })\n  }\n\n  public sendGroupMessage(\n    args: WithAuth<SendGroupMessageParameters>\n  ): Promise<SendGroupMessageResponse> {\n    return this.request<SendGroupMessageResponse>({\n      path: \"send_group_message\",\n      method: \"post\",\n      body: omit(args, [\"auth\"]),\n      auth: args.auth,\n    })\n  }\n\n  onIMAccountStatusUpdated(handler: IMAccountStatusUpdatedHandler): void {\n    this.on(\n      EventType.IM_ACCOUNT_STATUS_UPDATED,\n      handler as unknown as EventHandler\n    )\n  }\n\n  onIMAccountUpdated(handler: IMAccountUpdatedHandler): void {\n    this.on(EventType.IM_ACCOUNT_UPDATED, handler as unknown as EventHandler)\n  }\n\n  onNewConversation(handler: NewConversationHandler): void {\n    this.on(EventType.NEW_CONVERSATION, handler as unknown as EventHandler)\n  }\n\n  onConversationUpdated(handler: ConversationUpdatedHandler): void {\n    this.on(EventType.CONVERSATION_UPDATED, handler as unknown as EventHandler)\n  }\n\n  onMessageReceived(handler: MessageReceivedEvent): void {\n    this.on(EventType.MESSAGE_RECEIVED, handler as unknown as EventHandler)\n  }\n\n  onMessageUpdated(handler: MessageUpdatedHandler): void {\n    this.on(EventType.MESSAGE_UPDATED, handler as unknown as EventHandler)\n  }\n\n  private onEvent(_channel: string, evt: unknown, _extra?: unknown) {\n    const e = evt as Event\n    const handler = this._handlers[e.type]\n    handler && handler(e)\n  }\n\n  /**\n   * Emits a log message to the console.\n   *\n   * @param level The level for this message\n   * @param args Arguments to send to the console\n   */\n  private log(\n    level: LogLevel,\n    message: string,\n    extraInfo: Record<string, unknown>\n  ) {\n    if (logLevelSeverity(level) >= logLevelSeverity(this._logLevel)) {\n      this._logger(level, message, extraInfo)\n    }\n  }\n\n  /**\n   * Transforms an API key or access token into a headers object suitable for an HTTP request.\n   *\n   * This method uses the instance's value as the default when the input is undefined. If neither are defined, it returns\n   * an empty object\n   *\n   * @param auth API key or access token\n   * @returns headers key-value object\n   */\n  private async authAsHeaders(auth?: string): Promise<Record<string, string>> {\n    const headers: Record<string, string> = {}\n    const authHeaderValue = auth ?? this._auth\n    if (!authHeaderValue) return headers\n    headers[\"authorization\"] = `Bearer ${authHeaderValue}`\n    return headers\n  }\n\n  private channelName(id: string): string {\n    return `uim/im-accounts/${id}`\n  }\n}\n\n/*\n * Type aliases to support the generic request interface.\n */\ntype Method = \"get\" | \"post\" | \"patch\" | \"delete\"\ntype PlainQueryParams = Record<string, string | number | boolean>\ntype QueryParams = PlainQueryParams | URLSearchParams\n\ntype WithAuth<P> = P & { auth?: string }\n"]}